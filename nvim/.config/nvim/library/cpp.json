{
  "vi": {
    "prefix": "vector<int>",
    "body": [
      "vector<int> "
    ]
  },
  "ll": {
    "prefix": "long long",
    "body": [
      "long long "
    ]
  },
  "vll": {
    "prefix": "vector<long long>",
    "body": [
      "vector<long long> "
    ]
  },
  "pii": {
    "prefix": "pii",
    "body": [
      "pair<int, int> "
    ]
  },
  "pll": {
    "prefix": "pll",
    "body": [
      "pair<long, long> "
    ]
  },
  "vvi": {
    "prefix": "vvi",
    "body": [
      "vector<vector<int>> "
    ]
  },
  "vvl": {
    "prefix": "vvl",
    "body": [
      "vector<vector<long long>> "
    ]
  },
  "vpii": {
    "prefix": "vpii",
    "body": [
      "vector<pair<int, int>> "
    ]
  },
  "vpll": {
    "prefix": "vpll",
    "body": [
      "vector<pair<long, long>> "
    ]
  },
  "pbds": {
    "prefix": "ordered set",
    "body": [
      "#include <ext/pb_ds/assoc_container.hpp>",
      "#include <ext/pb_ds/tree_policy.hpp>",
      "using namespace __gnu_pbds;",
      "typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> oset; // ordered_set",
      "// member functions :",
      "// 1. order_of_key(k) : number of elements strictly lesser than k.",
      "// 2. find_by_order(k) : k-th element in the oset.",
      ""
    ]
  },
  "Modular": {
    "prefix": "Modular Arithmetic",
    "body": [
      "const int mod = 1e9 + 7;",
      "",
      "template <const int32_t MOD> struct modint {",
      "  int32_t value;",
      "  modint() = default;",
      "  modint(int32_t value_) : value(value_) {}",
      "  modint(int64_t value_) : value(value_ % MOD) {}",
      "  inline modint<MOD> operator+(modint<MOD> other) const {",
      "    int32_t c = this->value + other.value;",
      "    return modint<MOD>(c >= MOD ? c - MOD : c);",
      "  }",
      "  inline modint<MOD> operator-(modint<MOD> other) const {",
      "    int32_t c = this->value - other.value;",
      "    return modint<MOD>(c < 0 ? c + MOD : c);",
      "  }",
      "  inline modint<MOD> operator*(modint<MOD> other) const {",
      "    int32_t c = (int64_t)this->value * other.value % MOD;",
      "    return modint<MOD>(c < 0 ? c + MOD : c);",
      "  }",
      "  inline modint<MOD> &operator+=(modint<MOD> other) {",
      "    this->value += other.value;",
      "    if (this->value >= MOD)",
      "      this->value -= MOD;",
      "    return *this;",
      "  }",
      "  inline modint<MOD> &operator-=(modint<MOD> other) {",
      "    this->value -= other.value;",
      "    if (this->value < 0)",
      "      this->value += MOD;",
      "    return *this;",
      "  }",
      "  inline modint<MOD> &operator*=(modint<MOD> other) {",
      "    this->value = (int64_t)this->value * other.value % MOD;",
      "    if (this->value < 0)",
      "      this->value += MOD;",
      "    return *this;",
      "  }",
      "  inline modint<MOD> operator-() const {",
      "    return modint<MOD>(this->value ? MOD - this->value : 0);",
      "  }",
      "  modint<MOD> pow(uint64_t k) const {",
      "    modint<MOD> x = *this, y = 1;",
      "    for (; k; k >>= 1) {",
      "      if (k & 1)",
      "        y *= x;",
      "      x *= x;",
      "    }",
      "    return y;",
      "  }",
      "  modint<MOD> inv() const { return pow(MOD - 2); } // MOD must be a prime",
      "  inline modint<MOD> operator/(modint<MOD> other) const {",
      "    return *this * other.inv();",
      "  }",
      "  inline modint<MOD> operator/=(modint<MOD> other) {",
      "    return *this *= other.inv();",
      "  }",
      "  inline bool operator==(modint<MOD> other) const {",
      "    return value == other.value;",
      "  }",
      "  inline bool operator!=(modint<MOD> other) const {",
      "    return value != other.value;",
      "  }",
      "  inline bool operator<(modint<MOD> other) const { return value < other.value; }",
      "  inline bool operator>(modint<MOD> other) const { return value > other.value; }",
      "};",
      "",
      "template <int32_t MOD> modint<MOD> operator*(int64_t value, modint<MOD> n) {",
      "  return modint<MOD>(value) * n;",
      "}",
      "template <int32_t MOD> modint<MOD> operator*(int32_t value, modint<MOD> n) {",
      "  return modint<MOD>(value % MOD) * n;",
      "}",
      "template <int32_t MOD> istream &operator>>(istream &in, modint<MOD> &n) {",
      "  return in >> n.value;",
      "}",
      "template <int32_t MOD> ostream &operator<<(ostream &out, modint<MOD> n) {",
      "  return out << n.value;",
      "}",
      "",
      "using mint = modint<mod>;",
      ""
    ]
  },
  "Combi": {
    "prefix": "Combinatorics",
    "body": [
      "struct combi{",
      "  int n; vector<mint> facts, finvs, invs;",
      "  combi(int _n): n(_n), facts(_n), finvs(_n), invs(_n){",
      "    facts[0] = finvs[0] = 1;",
      "    invs[1] = 1;",
      "    for (int i = 2; i < n; i++) invs[i] =  invs[mod % i] * (-mod / i);",
      "    for(int i = 1; i < n; i++){",
      "      facts[i] = facts[i - 1] * i;",
      "      finvs[i] = finvs[i - 1] * invs[i];",
      "    }",
      "  }",
      "  inline mint fact(int n) { return facts[n]; }",
      "  inline mint finv(int n) { return finvs[n]; }",
      "  inline mint inv(int n) { return invs[n]; }",
      "  inline mint ncr(int n, int k) { return n < k or k < 0 ? 0 : facts[n] * finvs[k] * finvs[n-k]; }",
      "};",
      ""
    ]
  },
  "DSU": {
    "prefix": "DSU",
    "body": [
      "class DSU {",
      "  vector<int> f, siz;",
      "",
      "public:",
      "  DSU(int n) : f(n), siz(n, 1) { iota(f.begin(), f.end(), 0); } int leader(int x) {",
      "    while (x != f[x])",
      "      x = f[x] = f[f[x]];",
      "    return x;",
      "  }",
      "  bool same(int x, int y) { return leader(x) == leader(y); }",
      "  bool merge(int x, int y) {",
      "    x = leader(x);",
      "    y = leader(y);",
      "    if (x == y)",
      "      return false;",
      "    siz[x] += siz[y];",
      "    f[y] = x;",
      "    return true;",
      "  }",
      "  int size(int x) { return siz[leader(x)]; }",
      "};",
      ""
    ]
  },
  "Sparse Table": {
    "prefix": "Sparse Table",
    "body": [
      "template <typename T, class F = function<T(const T &, const T &)>>",
      "class SparseTable {",
      "  int n, lg;",
      "  vector<vector<T>> stab;",
      "  F op;",
      "",
      "public:",
      "  SparseTable(const vector<T> &arr, const F &f) : op{f} {",
      "    this->n = arr.size();",
      "    this->lg = __lg(n) + 1;",
      "    stab.resize(lg);",
      "    stab[0] = arr;",
      "    for (int j = 1; j < lg; j++) {",
      "      stab[j].resize(n - (1 << j) + 1);",
      "      for (int i = 0; i < stab[j].size(); i++) {",
      "        stab[j][i] = op(stab[j - 1][i], stab[j - 1][i + (1 << (j - 1))]);",
      "      }",
      "    }",
      "  }",
      "",
      "  vector<vector<T>> getTab() { return stab; }",
      "",
      "  T query(int l, int r) {",
      "    assert(0 <= l && l <= r && r <= n - 1);",
      "    int j = __lg(r - l + 1);",
      "    return op(stab[j][l], stab[j][r - (1 << j) + 1]);",
      "  }",
      "};",
      ""
    ]
  }
}
